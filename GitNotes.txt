
***********************************************************
Core Concepts
***********************************************************

What is Git ?
Decentralized or distributed version control system.
local operations - only for minor operations network connection is required
Open Source
Integration to other systems

Repository
Within git the collection of version control files being managed and their history is considered as repository
hidden folder in workspace .get folder, it contains collection of files and folders that make up the internal 
structure of the repository

commits and files
commit -> contains of one or many files changes, Git versions files not folders. 
commits are saved on to the timeline (Branch) 

GitHub -> Git repository hosting service by github.inc

git config --global user.name "Yaswanth Iddibani"

git config --global user.email "yaswanth.iddibani@gmail.com"

bash profile -> alias npp='notepad++ -multiInst -nosession'

old value: editor = \"C:\\Users\\yaswa\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" --wait
new value: git config --global core.editor = "notepad++ -multiInst -nosession"

git congig --global diff.merge p4merge

git config --global difftool.p4merge.path "C:\Program Files\Perforce\p4merge.exe"

git config --global difftool.prompt false

git config --global merge.tool p4merge

git config --global mergetool.p4merge.path "C:\Program Files\Perforce\p4merge.exe"

git config --global mergetool.prompt false

git init projectname(demo)
git init . (dot -> current folder)

ls -al (list all files in repo)

local Git States
-------------------------
1. Working Directory
2. Staging area
3. Repository (.git area)
4. Remote (It can have all three states again)

git status

git add filename -> add file to staging area
git commit "Comment" -> moves files from staging area to repo

git add . -> add all files to git staging area

git log -> for checking all logs of commit
git show -> shows the last commit and a diff containing all the changes; press q to exit show command line

git ls-files -> files tracked by git

git commit -a ->first add files to staging area, and then directly proceed to committinng
git commit -am "Message"

git reset HEAD "filename" -> to unstage a file
git checkout -- "filename" -> to restore from last commit from repo

git help log -> all types of log options available

git log --oneLine --graph -- decorate --all     -> gets only commit entry providing information on a single line
												-> provides an asteric based graph denoting our branching hierarchy
												-> tells which commits are part of which branching and other labels 
												   within the git repo
												-> provides history for all the branches that are available in this 
												   repository


GIT alias
----------
git config --global alias.hist "--oneline --graph --decorate --all" -> adding alias for history

git config --global --list -> for listing out entries in config file

git hist -> executing commanad via alias name

git hist -- README.md (file name) -> returns history of only that filename

Rename Files
-------------
git mv Git.txt GitNotes.txt -> change file name

git add -A -> to see all the files changes

Git Ignore file -> *.log -> wild card entry for all log files

Comparing differences
---------------------
git diff commitid1 commitid2 -> shows the differnce between the commits

git difftool commitid1 commitid2 -> opens all files from the configured difftool from config file

Branching and Merge types
--------------------------
Branch - Timeline of commits
Branch names are labels
Deletion removed labels only

Merging branches leads different scenarios

1. Fast Forward Merge -> Simplest case, Like never branched, can be disabled, 
 						 no additional work has been detected on the parent branch
2. Automatic Merges   -> This happens when git detects non-conflicting changes in the parent branch
						 git is able to automatically resolve any conflicts
3. Manual Merge 	  -> This happens when git is unable to automatically resolve any conflicts
						 Git enters a special conflicting merge state, which means all merge conflicts
						 must be resolved prior to moving forward with the commit

Special Markers
-----------------
1. Pointers - HEAD -> last commit to current branch. 
					  can be moved to any manual commit point

Branches
--------
git branch -> identifies current branch in green and lists out the branches

git checkout -b (branchName)updates -> upadtes branch is created

git diff updates master -> branch names can also be passed

switch branch
---------------
git checkout master -> switch to master from branches
git branch -a -> list out all branches
git merge (branchNameToBeMerged)updates

delete branch
--------------
git branch -d updates(branch name)

conflict of resolution
----------------------

Tagging
-------
1. Light weight Tagging
git tag myTag branchName(this references to last commit on the branch)
git tag --list
git hist
git tag -d myTag

git tag -a v1.0 -m "Commit Tags"

pushing tags
---------------
git push origin tagName
git push --tags

git push origin :tagName -> to udpate the remote repo with the deleted tag

Stash Details
----------------
git stash 
git stash list
git stash pop

Time Travel with rest and reflog
---------------------------------
git add .
git status

git reset (commitID) --soft -> 3distinct ways of resetting
								1. soft -> least destructive of all, chnages are staged and HEAD pointed to commit iD given
								2. default --mixed -> unstages all changes
								3. hard --hard -> all changes have been wiped off till this commit iddibani, along with staging area


git reflog -> shows all actions that we have taken while in this repo

Push changes to remote repo
----------------------------
git remote add origin https://github.com/yashik777-nb/GiTHubBasics.git (refernce name, and then url of repo)
git push -u origin master --tags -> --u(sets up tracking branch relationship btwn master branch on local repo and
										master on remote repo)
										name of remote repo
										name of the branch
										to send all the tags in our repo to github
git remote -v ->  lists  out all remote connections

Authentication Used
------------------------
Above step was HTTPS based
ssh vs htttps: https always asks for username & password, bypass it

Generating SSH Key
-------------------
ssh-keygen -t rsa -b 4096 -C "yaswanth.iddibani@gmail.com" -> generates two keys one public and private

ssh -T git@github.com

Clone from Git
------------------
git clone ssh/https link
git clone ssh/https(link) projectNameFolder

Fetch vs Pull
------------------
get changes from remote server 
get changes from remote server and merge local changes

git goes to remote repo and update all of its local information based on whats chnaged on githhub
git Fetch
git pull

git fetch -p -> updates stale references : prune option, looks for dead branches and removes those references

Git Hub Repo Renamed
-----------------------
git remote -v -> origin points to old repo name
git remote set-url origin git@github.com:yashik777-nb/website.git

Change branches
------------------
git checkout master -> switch to master
git checkout -b origin (branchName)

git push orogin :bracnhNmae -> delte branch on github repo website

Pull With Rebase
-----------------
git pull --Rebase

update git
------------
git update-git-for-windows
